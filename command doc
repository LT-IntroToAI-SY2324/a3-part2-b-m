from movies import songs_db
from match import match
from typing import List, Tuple, Callable, Any

# The projection functions, that give us access to certain parts of a "movie" (a tuple)
def get_title(song: Tuple[str, str, int, List[str]]) -> str:
    return song[0]


def get_artist(song: Tuple[str, str, int, List[str]]) -> str:
    return song[1]


def get_genre(song: Tuple[str, str, int, List[str]]) -> int:
    return song[2]


def get_year(song: Tuple[str, str, int, List[str]]) -> List[str]:
    return song[3]

# Below are a set of actions. Each takes a list argument and returns a list of answers
# according to the action and the argument. It is important that each function returns a
# list of the answer(s) and not just the answer itself.


def title_by_year(matches: List[str]) -> List[str]:
   
   
    """Finds all songs made in the passed in year

    Args:
        matches - a list of 1 string, just the year. Note that this year is passed as a
            string and should be converted to an int

    Returns:
        a list of song titles made in the passed in year
    """
    results = []
    
    for song in songs_db:
        
        if int(matches[0]) == get_year(songs):
           
            results.append(get_title(songs))
   
    return results


def title_by_year_range(matches: List[str]) -> List[str]:
    """Finds all songs made in the passed in year range

    Args:
        matches - a list of 2 strings, the year beginning the range and the year ending
            the range. For example, to get songs from 1991-1994 matches would look like
            this - ["1991", "1994"] Note that these years are passed as strings and
            should be converted to ints.

    Returns:
        a list of movie titles made during those years, inclusive (meaning if you pass
        in ["1991", "1994"] you will get songs made in 1991, 1992, 1993 & 1994)
    """
    results = []
    # print(matches)
    for songs in songs_db:
        
        if  int(matches[0]) <= get_year(songs) <= int(matches[1]):
            #print(get_title(songs))
            results.append(get_title(songs))
    
    return results



def title_before_year(matches: List[str]) -> List[str]:
    
    """Finds all songs made before the passed in year

    Args:
        matches - a list of 1 string, just the year. Note that this year is passed as a
            string and should be converted to an int

    Returns:
        a list of movie titles made before the passed in year, exclusive (meaning if you
        pass in 1992 you won't get any songs made that year, only before)
    """
    results = []
    # print(matches)
    for songs in songs_db:
        
        if  get_year(songs) < int(matches[0]):
            #print(get_title(songs))
            results.append(get_title(songs))
    return results


def title_after_year(matches: List[str]) -> List[str]:
    """Finds all songs made after the passed in year

    Args:
        matches - a list of 1 string, just the year. Note that this year is passed as a
            string and should be converted to an int

    Returns:
        a list of movie titles made after the passed in year, exclusive (meaning if you
        pass in 1992 you won't get any songs made that year, only after)
    """
    results = []
    # print(matches)
    for songs in songs_db:
        
        if  get_year(songs) > int(matches[0]):
            #print(get_title(songs))
            results.append(get_title(songs))
   
    return results


def artist_by_title(matches: List[str]) -> List[str]:
    """Finds director of movie based on title

    Args:
        matches - a list of 1 string, just the title

    Returns:
        a list of 1 string, the director of the movie
    """
    results = []
    
    for movie in movie_db:
        
        if  get_title(songs) == matches[0]:
           
            results.append(get_artist(songs))
   
    return results


def title_by_artist(matches: List[str]) -> List[str]:
    """Finds songs directed by the passed in artist

    Args:
        matches - a list of 1 string, just the artist

    Returns:
        a list of songs titles sang by the passed in artist
    """
    results = []
    
    for songs in songs_db:
        
        if  get_artist(songs) == matches[0]:
           
            results.append(get_title(songs))
    
    return results

    

def artist_by_title(matches: List[str]) -> List[str]:
    """Finds artists who sang in the passed in song title

    Args:
        matches - a list of 1 string, just the song title

    Returns:
        a list of artists who sang in the passed in title
    """
    results = []
    
    for songs in songs_db:
        
        if  get_title(songs) == matches[0]:
           
            results = get_artist(songs)
    return results


def year_by_title(matches: List[str]) -> List[int]:
    """Finds year of passed in song title

    Args:
        matches - a list of 1 string, just the song title

    Returns:
        a list of one item (an int), the year that the song was made
    """
    results = []
    
    for songs in songs_db:
        
        if  get_title(songs) == matches[0]:
           
            results.append(get_year(songs))
    return results


def title_by_artist(matches: List[str]) -> List[str]:
    """Finds titles of all songs that the given artist was in

    Args:
        matches - a list of 1 string, just the artist

    Returns:
        a list of songs titles that the artist sang in
    """
    results = []
    
    for songs in songs_db:
        
        if  matches[0] in get_artist(songs):
           
            results.append(get_title(songs))
    return results


# dummy argument is ignored and doesn't matter
def bye_action(dummy: List[str]) -> None:
    raise KeyboardInterrupt


# The pattern-action list for the natural language query system A list of tuples of
# pattern and action It must be declared here, after all of the function definitions
pa_list: List[Tuple[List[str], Callable[[List[str]], List[Any]]]] = [
    (str.split("what songs were made in _"), title_by_year),
    (str.split("what songs were made between _ and _"), title_by_year_range),
    (str.split("what songs were made before _"), title_before_year),
    (str.split("what songs were made after _"), title_after_year),
    # note there are two valid patterns here two different ways to ask for the director
    # of a movie
    (str.split("who sang %"), artist_by_title),
    (str.split("who was the artist of %"), artist_by_title),
    (str.split("what songs were sang by %"), title_by_artist),
    (str.split("who sang in %"), artist_by_title),
    (str.split("when was % made"), year_by_title),
    (str.split("in what songs did % appear"), title_by_artist),
    (str.split("% appeared in what songs?"), title_by_artist),
    (["bye"], bye_action),
]


def search_pa_list(src: List[str]) -> List[str]:
    """Takes source, finds matching pattern and calls corresponding action. If it finds
    a match but has no answers it returns ["No answers"]. If it finds no match it
    returns ["I don't understand"].

    Args:
        source - a phrase represented as a list of words (strings)

    Returns:
        a list of answers. Will be ["I don't understand"] if it finds no matches and
        ["No answers"] if it finds a match but no answers
    """
    for pat, act in pa_list:
        mat = match(pat,src)
       
       
        if mat is not None:
           answer = act(mat)
           return answer if answer else ["No answers"]
       
    return ["I don't understand"]


def query_loop() -> None:
    """The simple query loop. The try/except structure is to catch Ctrl-C or Ctrl-D
    characters and exit gracefully.
    """
    print("Welcome to the songs database!\n")
    while True:
        try:
            print()
            query = input("Your query? ").replace("?", "").lower().split()
            answers = search_pa_list(query)
            for ans in answers:
                print(ans)

        except (KeyboardInterrupt, EOFError):
            break

    print("\nSo long!\n")


# uncomment the following line once you've written all of your code and are ready to try
# it out. Before running the following line, you should make sure that your code passes
# the existing asserts.
query_loop()

if __name__ == "__main__":
    assert isinstance(title_by_year(["1974"]), list), "title_by_year not returning a list"
    assert isinstance(title_by_year_range(["1970", "1972"]), list), "title_by_year_range not returning a list"
    assert isinstance(title_before_year(["1950"]), list), "title_before_year not returning a list"
    assert isinstance(director_by_title(["jaws"]), list), "director_by_title not returning a list"
    assert isinstance(title_by_director(["steven spielberg"]), list), "title_by_director not returning a list"
    assert isinstance(actors_by_title(["jaws"]), list), "actors_by_title not returning a list"
    assert isinstance(year_by_title(["jaws"]), list), "year_by_title not returning a list"
    assert isinstance(title_by_actor(["orson welles"]), list), "title_by_actor not returning a list"
    
    assert sorted(title_by_year(["1974"])) == sorted(
        ["amarcord", "chinatown"]
    ), "failed title_by_year test"
    assert sorted(title_by_year_range(["1970", "1972"])) == sorted(
        ["the godfather", "johnny got his gun"]
    ), "failed title_by_year_range test"
    assert sorted(title_before_year(["1950"])) == sorted(
        ["casablanca", "citizen kane", "gone with the wind", "metropolis"]
    ), "failed title_before_year test"
    assert sorted(title_after_year(["1990"])) == sorted(
        ["boyz n the hood", "dead again", "the crying game", "flirting", "malcolm x"]
    ), "failed title_after_year test"
    assert sorted(director_by_title(["jaws"])) == sorted(
        ["steven spielberg"]
    ), "failed director_by_title test"
    assert sorted(title_by_director(["steven spielberg"])) == sorted(
        ["jaws"]
    ), "failed title_by_director test"
    assert sorted(actors_by_title(["jaws"])) == sorted(
        [
            "roy scheider",
            "robert shaw",
            "richard dreyfuss",
            "lorraine gary",
            "murray hamilton",
        ]
    ), "failed actors_by_title test"
    assert sorted(actors_by_title(["movie not in database"])) == [], "failed actors_by_title not in database test"
    assert sorted(year_by_title(["jaws"])) == sorted(
        [1975]
    ), "failed year_by_title test"
    assert sorted(title_by_actor(["orson welles"])) == sorted(
        ["citizen kane", "othello"]
    ), "failed title_by_actor test"
    assert sorted(search_pa_list(["hi", "there"])) == sorted(
        ["I don't understand"]
    ), "failed search_pa_list test 1"
    assert sorted(search_pa_list(["who", "directed", "jaws"])) == sorted(
        ["steven spielberg"]
    ), "failed search_pa_list test 2"
    assert sorted(
        search_pa_list(["what", "movies", "were", "made", "in", "2020"])
    ) == sorted(["No answers"]), "failed search_pa_list test 3"

    print("All tests passed!")